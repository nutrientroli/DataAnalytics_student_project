html_document:
number_sections: yes
toc: yes
toc_depth: 2
---
****
# General overview of the data tracking
****
To have a general idea of what has been tracked and for how long, check the datasets provided and answer to
the following questions:
## How long is the tracking period?
```{r, eval=TRUE, echo=TRUE}
# Librerias en uso
library("knitr")
library("dplyr")
library("lubridate")
library("ggplot2")
```
```{r, eval=TRUE, echo=TRUE}
trackingData = read.csv("tracking.csv",sep = ",",na.strings = "NA")
colnames(trackingData)[4] = "SessionLenght"
colnames(trackingData)[5] = "MoneySpent"
daysOfTracking = length(  unique(trackingData$Date))
daysOfTracking
paste ("El total de dias de tracking es de unos ", (daysOfTracking) , " lo cual equivale a 4 meses de analisis")
```
## How many different users have installed the game?
```{r, eval=TRUE, echo=TRUE}
usersData = read.csv("users.csv",sep = ",", na.strings ="NA")
usersInstalledTheGame = unique( trackingData$UserID[trackingData$Action == "Install"])
usersInstalledGameAmount = length(usersInstalledTheGame)
usersInstalledGameAmount
paste(" Las instalaciones son notorias sumando un total de " , usersInstalledGameAmount)
```
## How many different users have played the game during the tracking period?
```{r, eval=TRUE, echo=TRUE}
usersPlayedGame = unique( trackingData$UserID[trackingData$Action == "Session"] )
usersPlayedGameAmount = length(usersPlayedGame)
usersPlayedGameAmount
paste ("De los usuarios que han jugado encontramos que " , usersPlayedGameAmount , " han jugado al juego")
```
## How many users have uninstalled the game?
```{r, eval=TRUE, echo=TRUE}
usersUninstalledGame = unique( trackingData$UserID[trackingData$Action == "Uninstall"] )
usersUninstalledGameAmount = length(usersUninstalledGame)
usersUninstalledGameAmount
paste ("Los usuarios que han desintalado el juego, sin importar si lo juegan o no es de " , usersUninstalledGameAmount)
```
## What is the average of the number of sessions played by the users during the tracking period?
```{r, eval=TRUE, echo=TRUE}
sessionSelection = trackingData[trackingData$Action == "Session",]
sessionAverage = mean(sessionSelection$SessionLenght)
sessionAverage
#                                                         pipe de UNIX Buscar
data.frame(usersInstalledGameAmount,usersUninstalledGameAmount,usersPlayedGameAmount,sessionAverage) %>% t() %>% kable()
# t() cambia columnas por hileras
# las pipes sirven para pasar datos de una funcion u objeto a otro
paste ("Por lo general encontramos que una cuarta parte de nuestras instalaciones han desintalado el juego en el periodo de los cuatro meses. Ademas casi la totalidad de los usuarios que han instalado el juego han jugado a este siendo una muy pequeña parte la cual ha desinstalado el juego antes de jugarlo.")
```
# Demographics of users
## What is the distribution of users that are playing the game, in terms of sex and age?
```{r, eval=TRUE, echo=TRUE}
pie (table(usersData$sex), main = "Sex distribtion of players",
labels = c("Females", "Males"),
col = rainbow(length(table(usersData$sex)))
)
barplot(table(usersData$age),
main = "Age distribution of users",
col = rainbow(length(table(usersData$age))),
ylab = "User amount",
xlab = "Age of user")
print("Es apreciable una clara diferencia entre el numero de jugadores y jugadoras dentro de la muestra obtenida. Esto nos indica claramente que el publico principal del juego son hombres")
```
## What is the distribution of age of female players and male players?
```{r, eval=TRUE, echo=TRUE}
# FEMALES ------------------------------------------------------ //
femaleSegment = usersData[usersData$sex == "F",]
# MALES  ------------------------------------------------------ //
maleSegment = usersData[usersData$sex == "M",]
boxplot( femaleSegment$age, maleSegment$age,
main = "Female and Male age comparaison",
names = c("Female Players", "Male Players"),
col = c("Green","Blue"),
ylab = "Age",
xlab = "Population Sample")
print ("El grafico nos muestra que existe una diferencia sustancial entre la edad en la cual las mujeres juegan y la edad en la que los hombres juegan. Encontramos una diferencia de edad de diez años entre las medias de ambos grupos. Lo que tambien es curioso es que los hombres de mas edad no juegan tanto como las mujeres de esa misma edad lo cual puede darse por varios motivos siendo uno de estos la menor esperanza de vida o la posibilidad de que no existan productos de entretenimiento adecuados para hombres de dicha edad")
# Conclusión ----------------------------------------------------- //
print("Conclusión")
print("Encontramos que en este juego la mayoria de usuarios que lo juegan son hombres que en su mayoria se encuentran entre 30 y 40 años. Estos forman aproximadamente un 60% de la poblacion del juego. Encontramos ademas que el juego atrae la atencion de mujeres de entre 53 y 57 años. Estas ocupan un 40% aproximadamente de la muestra obtenida. En caso de necesidad seria primario centrarse en satisfacer al publico masculino antes que al femenino (en caso de necesidad claro esta).")
# ----------------------------------------------------------------- //
```
# Metrics of Player Population
## Installs per day
### How many installations are there per day?
#### Draw a plot that shows the total number of installations per day. Also draw a line that shows the average of installations. Include a legend describing the two curves.
```{r, eval=TRUE, echo=TRUE}
library(dplyr)
# daysOfMesure = unique(trackingData$Date)
# Guardamos un data set solo con las instalaciones
temporalTrackingData = trackingData[trackingData$Action == "Install",]
installationsPerDay = temporalTrackingData %>% group_by(Date) %>% summarise(Installs = length(Action))
installationsPerDay
installsAverage = mean(installationsPerDay$Installs)
installsAverage
plot(installationsPerDay$Installs ,
main = "Installations per day Plot",
ylab = "Instalations Per Day" ,
xlab = "Day of mesure",
type = "l",
col = "blue"
)
abline(h = installsAverage, col = "green")
legend(x = 30, y = 70,
legend = c("Installations","Average of installtions"),
bg = "grey",
col=c("blue", "green"),
lty=1:1,
cex=0.8,
title = "Type of lines")
paste(" Por lo que indica el grafico podemos ver que las instalaciones medias al dia son unas " , installsAverage , " Es curiosa la tendencia de cada x dias sufrir una caida importante en cuanto a intalaciones. Esto puede deberse a las actividades externas. Debido a la edad de los jugadores podemos suponer que son momentos relacionados con la vida social y familiar ")
```
#### Draw a second plot where you show the same plot as before, together with the number of uninstallations per day.
```{r, eval=TRUE, echo=TRUE}
library(dplyr)
# UNINSTALLS PER DAY
temporalTrackingData = trackingData[trackingData$Action == "Uninstall",]
unInstallationsPerDay = temporalTrackingData %>% group_by(Date) %>% summarise(Uninstalls = length(Action))
unInstallationsPerDay
uninstallsAverage = mean(unInstallationsPerDay$Uninstalls)
uninstallsAverage
plot(unInstallationsPerDay$Uninstalls ,
main = "Unnstallations per day Plot",
ylab = "uNnstalations Per Day" ,
xlab = "Day of mesure",
type = "l",
col = "red"
)
abline(h = uninstallsAverage, col = "orange")
legend(80,6,legend = c("Uninstallations per day","Unintalls average"),bg = "grey",
col=c("red", "orange"), lty=1:1, cex=0.8,
title = "Type of lines")
paste ("Por suerte parece que la media de desintalaciones de la muestra ( " , uninstallsAverage , " ) es inferior a la media de instalaciones ( " , installsAverage , " lo cual es positivo debido a que significa que la poblacion formada por los usuarios con el juego instalado aumenta (esto no significa que lo jueguen). Si puediera superponer los graficos podria dar mas infomraicon pero por desgracia no consigo hacerlo por el momento")
# Joined representation of installs and uninstalls
# NO ESTOY SIENDO CAPAZ DE DIBUJAR AMBOS GRAFICOS JUNTOS, EN ESTA OCASION NO SE PORQUE NO ESTA FUNCINOANDO
plot( x = installationsPerDay$Installs ,
main = "Installations per day Plot",
ylab = "Instalations Per Day" ,
xlab = "Day of mesure",
type = "l",
col = c("blue","red")
)
abline(h = installsAverage, col = "green")
lines (unInstallationsPerDay$Uninstalls ,
type = "l",
col = "red"
)
abline(h = uninstallsAverage, col = "orange")
```
## DAU
### Compute DAU (Daily Active Users) along the days of the tracking period and show a plot (x axis of the play represents the dates and y axis the value of DAU every day).
```{r, eval=TRUE, echo=TRUE}
## Compute DAU (Daily Active Users) along the days of the tracking period
dte = as.Date(trackingData$Date)
trackingData$Date = NULL;
trackingData$Date = dte;
trackingDataOnlySesions = trackingData[ trackingData$Action =="Session" ,]
# trackingDataOnlySesions
sesionsPerDay = as.numeric( table( trackingDataOnlySesions$Date)  )
sesionsPerDayWithMonth = as.data.frame(sesionsPerDay)
sesionsPerDayWithMonth$Month = month(as.POSIXlt(unique( trackingDataOnlySesions$Date), format="%d/%m/%Y"))
sesionsPerDayWithMonth
plot(sesionsPerDay,
type = "l",
xlab = "Sample Day",
ylab = "Daily active users",
main = "DAU",
col = "dark green")
paste("Poco depsues del primer mes podemos observar una estabilizacion de los usuarios activos del dia lo cual puede deberse a diversos motivos entre los cuales podemos encontrar primeramente un mayor numero de usuarios o una mayor retencion (especulacion). Por lo general es un crecimiento positivo aunque acaba estancandose alrededor de los 400 a partir del primer mes")
```
### After you plot DAU, draw the same plot, but now with two curves: one with DAU per day and the other one with installations per day. Thus, we can evaluate how DAU is related with the number of installations.
```{r, eval=TRUE, echo=TRUE}
plot(sesionsPerDay,type = "l",
xlab = "Sample Day",
ylab = "Amounts",
col = "green",
main = "Daily Active users and installs")
lines(installationsPerDay, col= "dark blue" )
legend (x = 20, y = 200,
legend = c ("Daily active users" , "Installs per Day"),
col = c("green", "dark blue"),
text.col = c("green","dark blue"))
paste("ADVERTENCIA: Es posible que este grafico no se vea tal y como es en la preview de rStudio")
paste(" Como se podria esperar el ritmo de instalaciones durante el periodo de analisis se mantiene bastante estable con pequeños despuntes. Debido a las instalaciones que se realizan cada dia encontramos con que dia a dia los usuarios diarios activos")
#####
# Ejemplo
#x <- seq(-pi, pi, len = 65)
#plot(x, sin(x), type = "l", ylim = c(-1.2, 1.8), col = 3, lty = 2)
#points(x, cos(x), pch = 3, col = 4)
#lines(x, tan(x), type = "b", lty = 1, pch = 4, col = 6)
#title("legend(..., lty = c(2, -1, 1), pch = c(NA, 3, 4), merge = TRUE)",
#      cex.main = 1.1)
#legend(-1, 1.9, c("sin", "cos", "tan"), col = c(3, 4, 6),
#       text.col = "green4", lty = c(2, -1, 1), pch = c(NA, 3, 4),
#       merge = TRUE, bg = "gray90")
#####
```
## MAUU
### How much is MAUU?
#### Compute MAUU for each of the months of the tracking period and show it graphically.
```{r, eval=TRUE, echo=TRUE}
# Dates Info
# https://www.stat.berkeley.edu/~s133/dates.html
# Separemos cada mes y guardemos en este sus usuarios no repetidos
monthsOfAnalisis = unique( month(as.POSIXlt(trackingData$Date, format="%d/%m/%Y")))
monthsOfAnalisis
trackingData$Month = month(as.POSIXlt(trackingData$Date, format="%d/%m/%Y"))
monthsOfAnalisisName = unique(months(trackingData$Date))
monthsOfAnalisisName
GetUniqueUsersOfMonth = function( monthNumericIdentificator, dataStructure) {
if (monthNumericIdentificator < 1 || monthNumericIdentificator > 12) {
print("Unable to operate with month")
return(NULL)
}
# Comparamos el mes de cada entrada dentro de la estructura de datos y lo comparamos con el mes que le hemos pedido que anlize
monthDataFrame = dataStructure[ month(as.POSIXlt(trackingData$Date, format="%d/%m/%Y")) == monthNumericIdentificator, ]
print("SUCCESS!")
return (monthDataFrame)
}
maus = rep(1,length(monthsOfAnalisis))
iterationIndex = 0
# Iteramos por cada uno de los meses del analisis
for (mth in monthsOfAnalisis) {
iterationIndex = iterationIndex + 1
monthDataFrame = GetUniqueUsersOfMonth(mth,trackingData)
monthDataFrameOnlySesions = monthDataFrame[ monthDataFrame$Action =="Session" ,]
# cojemos de el data frame del mes la cantidad de entradas
activeUsersOfMonth = as.numeric( table( monthDataFrameOnlySesions$Date)  )
maus[iterationIndex] = activeUsersOfMonth
}
# Generamos el plot
plot (maus,
type = "l",
xlab = "Month",
ylab = "MAUU"
,xaxt="n",
col = "dark red",
main = "MAUU per month of analisis")
axis(side = 1,
at = c(1,2,3,4),
labels = monthsOfAnalisisName)
paste (" En la primera fase del despliegue del producto el MAUU parecer ser muy pequeño. Esto puedew deberse (y posiblemente se deba) a que la poblacion de jugadores diarios es aun muy limitada. En los siguientes meses se nota un incremento muy importante debido a que la poblacion ya esta establecida. ")
```
## DAU/MAUU ratio
### How much is the DAU/MAUU ratio?
#### Compute DAU/MAUU per day of the month.
```{r, eval=TRUE, echo=TRUE}
# Primero debemos saber el DAU --> Ya lo sabemos
# Y despues conocer el MAUU del mes --> Ya lo tenemos
#maus                # el mauu de cada mes
#sesionsPerDayWithMonth       # BASICAMENTE EL DAU DE CADA DIA junto con el mes del cual sale
#monthsOfAnalisis
# separate the sesions per each month
sesionsOfFirstMonth = sesionsPerDayWithMonth[sesionsPerDayWithMonth$Month == monthsOfAnalisis[1],]
sesionsSecondMonth = sesionsPerDayWithMonth[sesionsPerDayWithMonth$Month == monthsOfAnalisis[2],]
sesionsThirdMonth = sesionsPerDayWithMonth[sesionsPerDayWithMonth$Month == monthsOfAnalisis[3],]
sesionsForthMonth = sesionsPerDayWithMonth[sesionsPerDayWithMonth$Month == monthsOfAnalisis[4],]
sesionsOfFirstMonth
maus[1]
sesionsSecondMonth
maus[2]             # hay un aumento muy imporntate en el mau de un mes para el otro
sesionsThirdMonth
maus[3]
sesionsForthMonth
maus[4]
# Get for each day the relatio between the sesions / MAUU of the month of the day
# first month sesions
dauMauuFirstMonth = sesionsOfFirstMonth$sesionsPerDay / maus[1]
dauMauuSecondMonth = sesionsSecondMonth$sesionsPerDay / maus[2]
dauMauuThirdMonth = sesionsThirdMonth$sesionsPerDay / maus[3]
dauMauuForthMonth = sesionsForthMonth$sesionsPerDay / maus[4]
dauMauuAglomerated = c(dauMauuFirstMonth,dauMauuSecondMonth, dauMauuThirdMonth,dauMauuForthMonth)
dauMauuAglomerated
plot(dauMauuAglomerated)
```
#### Compute also the average DAU with respect to MAUU which will result in a single ratio per month
```{r, eval=TRUE, echo=TRUE}
# no estoy seguro de si es esto lo que pide
averageDauMaus = rep(-1,length(monthsOfAnalisis))
averageDauMaus[1] = mean(dauMauuAglomerated[1])
averageDauMaus[2] = mean(dauMauuAglomerated[2])
averageDauMaus[3] = mean(dauMauuAglomerated[3])
averageDauMaus[4] = mean(dauMauuAglomerated[4])
averageDauMaus
plot(averageDauMaus)
# o esto (media de los dau de un mes partido el mauu de este)
averageDaus = rep(-1,length(monthsOfAnalisis))
averageDaus[1] = mean(  sesionsOfFirstMonth$sesionsPerDay)
averageDaus[2] = mean(  sesionsSecondMonth$sesionsPerDay)
averageDaus[3] = mean(  sesionsThirdMonth$sesionsPerDay)
averageDaus[4] = mean(  sesionsForthMonth$sesionsPerDay)
averageDauMauPerMonth = averageDaus / maus
averageDauMauPerMonth
dauMauuFirstMonth = sesionsOfFirstMonth$sesionsPerDay / maus[1]
dauMauuSecondMonth = sesionsSecondMonth$sesionsPerDay / maus[2]
dauMauuThirdMonth = sesionsThirdMonth$sesionsPerDay / maus[3]
dauMauuForthMonth = sesionsForthMonth$sesionsPerDay / maus[4]
dauMauuAglomerated = c(dauMauuFirstMonth,dauMauuSecondMonth, dauMauuThirdMonth,dauMauuForthMonth)
dauMauuAglomerated
plot(dauMauuAglomerated)
plot (averageDauMauPerMonth,
xlab = "Months",
ylab = "Average DAU/MAUU per month",
type ="l")
trackingData = read.csv("tracking.csv",sep = ",",na.strings = "NA")
View(trackingData)
trackingData = read.csv("tracking.csv",sep = ",",na.strings = "NA")
colnames(trackingData)[4] = "SessionLenght"
colnames(trackingData)[5] = "MoneySpent"
temp <- trackingData[which(trackingData$Action == "Session"),]
View(temp)
table(temp)
table(temp,)
count_(temp$UserID)
count_(temp$UserID,)
rle(temp$UserID)
help("count")
str(temp)
nlevels(temp)
nlevels(temp$UserID)
table(nlevels(temp$UserID))
table(temp$UserID)
userSessionFreq <- data.frame(table(temp$UserID))
View(userSessionFreq)
View(userSessionFreq)
mean(userSessionFreq$Freq)
averageNºofSessions <- mean(userSessionFreq$Freq)
userSessionsAverage <- group_by(summarise(group_by(temp,UserID),TimeSession = mean(SessionLenght)))
userSessionsAverage <- data.frame(summarise(group_by(temp,UserID),TimeSession = mean(SessionLenght)))
library("knitr")
library("dplyr")
library("lubridate")
library("ggplot2")
userSessionsAverage <- data.frame(summarise(group_by(temp,UserID),TimeSession = mean(SessionLenght)))
View(userSessionsAverage)
help("sd")
userSessionsAverageSD <- data.frame(summarise(group_by(temp,UserID),TimeSession = sd(SessionLenght)))
View(userSessionsAverageSD)
AvgTimeSpent <- mean(userSessionsAverage)
AvgStandarDeviation <- mean(userSessionsAverageSD)
AvgTimeSpent <- mean(userSessionsAverage$TimeSession)
AvgStandarDeviation <- mean(userSessionsAverageSD$TimeSession)
View(userSessionFreq)
usersData = read.csv("users.csv",sep = ",", na.strings ="NA")
#Función a mejorar y optimizar ---> 7 minutos de cálculo...
for (user in result$UserID) {
prevDate = 0
sumTotal = 0
dates = c(as.character(temp[which(temp$UserID == user),]$Date))
if(length(dates)>1){
for (date in dates) {
if (prevDate!=0) {
sumTotal = sumTotal + as.numeric(as.character((as_date(as.character(date)) - as_date(as.character(prevDate)))))
}
prevDate = date
}
result[which(result$UserID == user), "AverageTimeBetweenSessions"] = sumTotal/length(dates)-1
}else{
result[which(result$UserID == user), "AverageTimeBetweenSessions"] = 0
}
}
trackingData = read.csv("tracking.csv",sep = ",",na.strings = "NA")
colnames(trackingData)[4] = "SessionLenght"
colnames(trackingData)[5] = "MoneySpent"
usersData = read.csv("users.csv",sep = ",", na.strings ="NA")
trackingData = read.csv("tracking.csv",sep = ",",na.strings = "NA")
colnames(trackingData)[5] = "MoneySpent"
usersData = read.csv("users.csv",sep = ",", na.strings ="NA")
temp = trackingData[which(trackingData$Action == "Session"),]
result = data.frame(cbind(UserID=as.character(usersData$UserID),AverageTimeBetweenSessions=rep("", nrow(usersData))), stringsAsFactors = FALSE)
#Función a mejorar y optimizar ---> 7 minutos de cálculo...
for (user in result$UserID) {
prevDate = 0
sumTotal = 0
dates = c(as.character(temp[which(temp$UserID == user),]$Date))
if(length(dates)>1){
for (date in dates) {
if (prevDate!=0) {
sumTotal = sumTotal + as.numeric(as.character((as_date(as.character(date)) - as_date(as.character(prevDate)))))
}
prevDate = date
}
result[which(result$UserID == user), "AverageTimeBetweenSessions"] = sumTotal/length(dates)-1
}else{
result[which(result$UserID == user), "AverageTimeBetweenSessions"] = 0
}
}
View(result)
#Función a mejorar y optimizar ---> 7 minutos de cálculo...
for (user in result$UserID) {
prevDate = 0
sumTotal = 0
dates = c(as.character(temp[which(temp$UserID == user),]$Date))
if(length(dates)>1){
for (date in dates) {
if (prevDate!=0) {
sumTotal = sumTotal + as.numeric(as.character((as_date(as.character(date)) - as_date(as.character(prevDate)))))
}
prevDate = date
}
result[which(result$UserID == user), "AverageTimeBetweenSessions"] = sumTotal/(length(dates)-1)
}else{
result[which(result$UserID == user), "AverageTimeBetweenSessions"] = 0
}
}
#Función a mejorar y optimizar ---> 7 minutos de cálculo...
for (user in result$UserID) {
prevDate = 0
sumTotal = 0
dates = c(as.character(temp[which(temp$UserID == user),]$Date))
if(length(dates)>1){
for (date in dates) {
if (prevDate!=0) {
sumTotal = sumTotal + as.numeric(as.character((as_date(as.character(date)) - as_date(as.character(prevDate)))))
}
prevDate = date
}
result[which(result$UserID == user), "AverageTimeBetweenSessions"] = sumTotal/(length(dates)-1)
}else{
result[which(result$UserID == user), "AverageTimeBetweenSessions"] = 0
}
}
View(result)
Group1 <- c(1:50)
Group2 <- c(1:50)
Group1 <- c(rep(4, 50))
Group2 <- c(rep(3, 50))
help("pt")
Table1 <- data.frame(Group1, Group2)
View(Table1)
MeanGroup1 <- mean(Table1$Group1)
MeanGroup2 <- mean(Table1$Group2)
help("sd")
StandardDeviationGroup1 <- sd(Table1$Group1)
StandardDeviationGroup2 <- sd(Table1$Group2)
View(result)
View(trackingData)
View(usersData)
View(temp)
View(result)
View(result)
Group1 <- c(result$AverageTimeBetweenSessions, 50)
length(Group1) <- length(Group1/2)
length(Group1) <- length(Group1) / 1000
length(Group1) <- length(Group1) / 100
length(Group1) <- length(Group1) / 10
Group1 <- c(result$AverageTimeBetweenSessions)
length(Group1) <- length(Group1) / 10
Group1 <- c(result$AverageTimeBetweenSessions)
length(Group1) <- length(Group1) / 100
Group2 <- c(sort(result$AverageTimeBetweenSessions, decreasing = TRUE))
Group2 <- c(order(result$AverageTimeBetweenSessions, decreasing = TRUE))
Group2 <- c(sort(result$AverageTimeBetweenSessions, decreasing = FALSE))
nrow(Group1)
Table1 <- data.frame(Group1, Group2)
length(Group2) <- length(Group2) / 100
Table1 <- data.frame(Group1, Group2)
View(temp)
View(Table1)
Group2 <- c(sort(result$AverageTimeBetweenSessions, decreasing = FALSE))
Group2 <- c(sort(result$AverageTimeBetweenSessions, decreasing = TRUE))
Group2 <- c((result$AverageTimeBetweenSessions, decreasing = TRUE))
sort
length(Group2) <- length(Group2) / 100
Table1 <- data.frame(Group1, Group2)
View(Table1)
MeanGroup1 <- mean(Table1$Group1)
View(Table1)
MeanGroup2 <- mean(Table1$Group2)
round(Table1$Group1)
help("mean")
MeanGroup1 <- mean(Table1$Group1, na.rm = TRUE)
MeanGroup1 <- mean(Table1$Group1, na.rm = FALSE)
MeanGroup1 <- mean(Table1$Group1)
help("obs")
help("pt")
help("pn")
help("qt")
help("qn")
MeanGroup1 <- sort(round(Table1$Group1, nsmall = 2))
MeanGroup1 <- mean(Table1[[1]])
Table1 <- data.frame(as.numeric(Group1) , as.numeric(Group2))
str(Table1)
MeanGroup1 <- mean(Table1$as.numeric.Group1.)
MeanGroup2 <- mean(Table1$as.numeric.Group2.)
StandardDeviationGroup1 <- sd(Table1$as.numeric.Group1.)
StandardDeviationGroup2 <- sd(Table1$as.numeric.Group2.)
nrow(Table1$as.numeric.Group1.)
ncol(Table1$as.numeric.Group1.)
View(temp)
View(Table1)
View(trackingData)
View(Table1)
n1 <- length(Table1$as.numeric.Group1.)
n2 <- length(Table1$as.numeric.Group2.)
help("df")
df(n1, n2)
df(n1, n2, log = FALSE)
df(MeanGroup1, n1, n2)
df <- n1 + n2 - 2
#5 Compute the p-value
#6 Interpret the results
help(qt)
